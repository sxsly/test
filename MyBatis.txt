在MyBatis的配置文件中可以使用<typeAliases></typeAliases>标签来为比较长的全类名定义一个别名
具体做法如下：
<typeAliases>
     <typeAlias type="全限定类名" alias="别名"/>
</typeAliases>  这样就定义了一个别名，这么做的好处是在sql映射xml文件中的凡是需要引用该类名的地方
都可以使用比较短的别名来代替，来达到简化的目的。
   除了可以使用<typeAlias type="全限定类名" alias="别名"/> 这种方式单独为某一个实体类设置别名外
还可以使用如下方式批量为某个报下所有的实体类设置别名，如下：
  为某个包下的所有实体类配置别名，MyBatis默认的设置别名的方式就是去除类所在的包后的简单类名
<typeAliases>
   <package name="包名"/>
</typeAliases>
  
<package name="包名"/>表示为这个包下面的所有实体类设置别名
MyBatis默认的设置别名的方式就是，去除该类所在包后的简单类名

需要注意的是：在MyBatis中对数据库进行除了查询操作外的其他操作时，需要调用SqlSession对象的commit()
方法来提交事务，否则数据库没有任何变化

当遇到实体类属性名和字段名不一致时的解决方法是：可以使用<resultMap>映射实体类属性名和表的字段名对应
关系  <resultMap type="全限定类名" id="">
    (用id属性来映射主键字段)    
   <id property="id" column="数据库中对应的列"/> 
   (用result属性来映射非主键字段)
    <result property="实体类属性名" column="数据库中对应的属性名"/>
</result>

总结：上面的测试代码演示当实体类中的属性名和表中的字段名不一致时，使用MyBatis进行查询操作时无法查询出相应的结果的问题以及针对问题采用的两种办法：

　　解决办法一: 通过在查询的sql语句中定义字段名的别名，让字段名的别名和实体类的属性名一致，这样就可以表的字段名和实体类的属性名一一对应上了，这种方式是通过在sql语句中定义别名来解决字段名和属性名的映射关系的。

　　解决办法二: 通过<resultMap>来映射字段名和实体类属性名的一一对应关系。这种方式是使用MyBatis提供的解决方式来解决字段名和属性名的映射关系的。

当使用<resultMap>标签来限制 实体类中的属性名与数据库中的一致时，可以在该标签中设置type属性来设置
实体类，id属性任意方便其他select标签来引用，此时<select>标签就不需要设置结果类型了。


、MyBatis一对一关联查询总结
　　MyBatis中使用association标签来解决一对一的关联查询，association标签可用的属性如下：

property:对象属性的名称
javaType:对象属性的类型
column:所对应的外键字段名称
select:使用另一个查询封装的结果

MyBatis一对多关联查询总结
   MyBatis中使用collection标签来解决一对多的关联查询，ofType属性指定集合中元素的对象类型


传递变量给sql元素：
        <sql id="roleCols">
          ${alias}.id,${alias.role_name},${alias.note}
        </sql>
        <select id="getRole" parameterType="long" resultMap="roleNap">
          select 
             <include refid="roleCols"> 
                   <property name="alias" value="t_role"/>   
             </include>
           from t_role where id=#{id}
        </select>


  MyBatis的运行过程分为两大步：第一步，读取配置文件缓存到Configuration对象，用以创建SqlSessionFactory
对象；